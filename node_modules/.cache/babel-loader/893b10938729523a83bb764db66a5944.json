{"ast":null,"code":"import _defineProperty from \"/home/anahit/Desktop/warehouse-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/anahit/Desktop/warehouse-app/src/Components/Table/Table.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport './Table.css';\nimport Chart from 'react-google-charts';\nimport { Grid } from '@material-ui/core';\n\nclass Table extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      columns: [{\n        title: 'Name',\n        field: 'name'\n      }, {\n        title: 'Date',\n        field: 'date',\n        type: 'date',\n        customSort: (a, b) => new Date(a.date) - new Date(b.date),\n        render: data => this.toDate(data.date)\n      }, {\n        title: 'Priority',\n        field: 'priority',\n        lookup: {\n          0: 'Low',\n          1: 'Medium',\n          2: 'High'\n        },\n        customSort: (a, b) => a.priority - b.priority\n      }],\n      data: [{\n        name: 'Do something',\n        date: '10.02.2004',\n        priority: 1\n      }, {\n        name: 'Become a billionaire',\n        date: '02.09.2024',\n        priority: 2\n      }]\n    };\n\n    this.toDate = string => new Date(string).toDateString();\n\n    this.priorities = {\n      0: 'Low',\n      1: 'Medium',\n      2: 'High'\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      spacing: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(MaterialTable, {\n      title: \"Table\",\n      columns: this.state.columns,\n      data: this.state.data,\n      sorting: true,\n      editable: {\n        onRowAdd: newData => new Promise(resolve => {\n          setTimeout(() => {\n            resolve();\n            const data = [...this.state.data];\n            data.push(newData);\n            this.setState(_objectSpread({}, this.state, {\n              data\n            }));\n          }, 600);\n        }),\n        onRowUpdate: (newData, oldData) => new Promise(resolve => {\n          setTimeout(() => {\n            resolve();\n            const data = [...this.state.data];\n            data[data.indexOf(oldData)] = newData;\n            this.setState(_objectSpread({}, this.state, {\n              data\n            }));\n          }, 600);\n        }),\n        onRowDelete: oldData => new Promise(resolve => {\n          setTimeout(() => {\n            resolve();\n            const data = [...this.state.data];\n            data.splice(data.indexOf(oldData), 1);\n            this.setState(_objectSpread({}, this.state, {\n              data\n            }));\n          }, 600);\n        })\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Chart, {\n      chartType: \"AreaChart\",\n      loader: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Loading Chart\"),\n      data: [['Date', 'Priority']].concat(this.state.data.sort((a, b) => new Date(a.date) - new Date(b.date)).map((item, index) => [{\n        v: new Date(item.date),\n        f: this.toDate(item.date)\n      }, {\n        v: item.priority,\n        f: this.priorities[item.priority]\n      }])),\n      options: {\n        title: 'Table chart',\n        hAxis: {\n          title: 'Year',\n          titleTextStyle: {\n            color: '#333'\n          }\n        },\n        vAxis: {\n          minValue: 0,\n          maxValue: 2\n        },\n        chartArea: {\n          width: '50%',\n          height: '70%'\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/home/anahit/Desktop/warehouse-app/src/Components/Table/Table.jsx"],"names":["React","Component","MaterialTable","Chart","Grid","Table","state","columns","title","field","type","customSort","a","b","Date","date","render","data","toDate","lookup","priority","name","string","toDateString","priorities","onRowAdd","newData","Promise","resolve","setTimeout","push","setState","onRowUpdate","oldData","indexOf","onRowDelete","splice","concat","sort","map","item","index","v","f","hAxis","titleTextStyle","color","vAxis","minValue","maxValue","chartArea","width","height"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAAQC,IAAR,QAAmB,mBAAnB;;AAEA,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC5BK,KAD4B,GACpB;AACNC,MAAAA,OAAO,EAAE,CACP;AACEC,QAAAA,KAAK,EAAE,MADT;AAEEC,QAAAA,KAAK,EAAE;AAFT,OADO,EAIJ;AACDD,QAAAA,KAAK,EAAE,MADN;AAEDC,QAAAA,KAAK,EAAE,MAFN;AAGDC,QAAAA,IAAI,EAAE,MAHL;AAIDC,QAAAA,UAAU,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU,IAAIC,IAAJ,CAASF,CAAC,CAACG,IAAX,IAAmB,IAAID,IAAJ,CAASD,CAAC,CAACE,IAAX,CAJxC;AAKDC,QAAAA,MAAM,EAAGC,IAAD,IAAU,KAAKC,MAAL,CAAYD,IAAI,CAACF,IAAjB;AALjB,OAJI,EAUJ;AACDP,QAAAA,KAAK,EAAE,UADN;AAEDC,QAAAA,KAAK,EAAE,UAFN;AAGDU,QAAAA,MAAM,EAAE;AACN,aAAG,KADG;AAEN,aAAG,QAFG;AAGN,aAAG;AAHG,SAHP;AAQDR,QAAAA,UAAU,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACQ,QAAF,GAAaP,CAAC,CAACO;AARpC,OAVI,CADH;AAsBNH,MAAAA,IAAI,EAAE,CACJ;AACEI,QAAAA,IAAI,EAAE,cADR;AAEEN,QAAAA,IAAI,EAAE,YAFR;AAGEK,QAAAA,QAAQ,EAAE;AAHZ,OADI,EAKD;AACDC,QAAAA,IAAI,EAAE,sBADL;AAEDN,QAAAA,IAAI,EAAE,YAFL;AAGDK,QAAAA,QAAQ,EAAE;AAHT,OALC;AAtBA,KADoB;;AAAA,SAoC5BF,MApC4B,GAoCnBI,MAAM,IAAI,IAAIR,IAAJ,CAASQ,MAAT,EAAiBC,YAAjB,EApCS;;AAAA,SAsC5BC,UAtC4B,GAsCf;AACX,SAAG,KADQ;AAEX,SAAG,QAFQ;AAGX,SAAG;AAHQ,KAtCe;AAAA;;AA4C5BR,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,KAA1B;AAAgC,MAAA,OAAO,EAAE,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AACE,MAAA,KAAK,EAAC,OADR;AAEE,MAAA,OAAO,EAAE,KAAKV,KAAL,CAAWC,OAFtB;AAGE,MAAA,IAAI,EAAE,KAAKD,KAAL,CAAWW,IAHnB;AAIE,MAAA,OAAO,MAJT;AAKE,MAAA,QAAQ,EAAE;AACVQ,QAAAA,QAAQ,EAAEC,OAAO,IAAI,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1CC,UAAAA,UAAU,CAAC,MAAM;AACfD,YAAAA,OAAO;AACP,kBAAMX,IAAI,GAAG,CAAC,GAAG,KAAKX,KAAL,CAAWW,IAAf,CAAb;AACAA,YAAAA,IAAI,CAACa,IAAL,CAAUJ,OAAV;AACA,iBAAKK,QAAL,mBACK,KAAKzB,KADV;AAEEW,cAAAA;AAFF;AAID,WARS,EAQP,GARO,CAAV;AASD,SAVoB,CADX;AAYVe,QAAAA,WAAW,EAAE,CAACN,OAAD,EAAUO,OAAV,KAAsB,IAAIN,OAAJ,CAAYC,OAAO,IAAI;AACxDC,UAAAA,UAAU,CAAC,MAAM;AACfD,YAAAA,OAAO;AACP,kBAAMX,IAAI,GAAG,CAAC,GAAG,KAAKX,KAAL,CAAWW,IAAf,CAAb;AACAA,YAAAA,IAAI,CAACA,IAAI,CAACiB,OAAL,CAAaD,OAAb,CAAD,CAAJ,GAA8BP,OAA9B;AACA,iBAAKK,QAAL,mBACK,KAAKzB,KADV;AAEEW,cAAAA;AAFF;AAID,WARS,EAQP,GARO,CAAV;AASD,SAVkC,CAZzB;AAuBVkB,QAAAA,WAAW,EAAEF,OAAO,IAAI,IAAIN,OAAJ,CAAYC,OAAO,IAAI;AAC7CC,UAAAA,UAAU,CAAC,MAAM;AACfD,YAAAA,OAAO;AACP,kBAAMX,IAAI,GAAG,CAAC,GAAG,KAAKX,KAAL,CAAWW,IAAf,CAAb;AACAA,YAAAA,IAAI,CAACmB,MAAL,CAAYnB,IAAI,CAACiB,OAAL,CAAaD,OAAb,CAAZ,EAAmC,CAAnC;AACA,iBAAKF,QAAL,mBACK,KAAKzB,KADV;AAEEW,cAAAA;AAFF;AAID,WARS,EAQP,GARO,CAAV;AASD,SAVuB;AAvBd,OALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAyCE;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,MAAM,EACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAHF;AAKE,MAAA,IAAI,EAAE,CACN,CAAC,MAAD,EAAS,UAAT,CADM,EAENoB,MAFM,CAEC,KAAK/B,KAAL,CAAWW,IAAX,CAAgBqB,IAAhB,CAAqB,CAAC1B,CAAD,EAAIC,CAAJ,KAAU,IAAIC,IAAJ,CAASF,CAAC,CAACG,IAAX,IAAmB,IAAID,IAAJ,CAASD,CAAC,CAACE,IAAX,CAAlD,EAAoEwB,GAApE,CAAwE,CAACC,IAAD,EAAOC,KAAP,KAAiB,CAChG;AAACC,QAAAA,CAAC,EAAE,IAAI5B,IAAJ,CAAS0B,IAAI,CAACzB,IAAd,CAAJ;AAAyB4B,QAAAA,CAAC,EAAE,KAAKzB,MAAL,CAAYsB,IAAI,CAACzB,IAAjB;AAA5B,OADgG,EAC3C;AACnD2B,QAAAA,CAAC,EAAEF,IAAI,CAACpB,QAD2C;AAEnDuB,QAAAA,CAAC,EAAE,KAAKnB,UAAL,CAAgBgB,IAAI,CAACpB,QAArB;AAFgD,OAD2C,CAAzF,CAFD,CALR;AAaE,MAAA,OAAO,EAAE;AACTZ,QAAAA,KAAK,EAAE,aADE;AAEToC,QAAAA,KAAK,EAAE;AACLpC,UAAAA,KAAK,EAAE,MADF;AAELqC,UAAAA,cAAc,EAAE;AACdC,YAAAA,KAAK,EAAE;AADO;AAFX,SAFE;AAQTC,QAAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,CADL;AAELC,UAAAA,QAAQ,EAAE;AAFL,SARE;AAYTC,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAE,KADE;AAETC,UAAAA,MAAM,EAAE;AAFC;AAZF,OAbX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAzCF,CADF,CADF;AA8ED;;AA3H2B;;AA8H9B,eAAe/C,KAAf","sourcesContent":["import React, {Component} from 'react';\nimport MaterialTable from 'material-table';\nimport './Table.css';\nimport Chart from 'react-google-charts';\nimport {Grid} from '@material-ui/core';\n\nclass Table extends Component {\n  state = {\n    columns: [\n      {\n        title: 'Name',\n        field: 'name'\n      }, {\n        title: 'Date',\n        field: 'date',\n        type: 'date',\n        customSort: (a, b) => new Date(a.date) - new Date(b.date),\n        render: (data) => this.toDate(data.date)\n      }, {\n        title: 'Priority',\n        field: 'priority',\n        lookup: {\n          0: 'Low',\n          1: 'Medium',\n          2: 'High'\n        },\n        customSort: (a, b) => a.priority - b.priority\n      }\n    ],\n    data: [\n      {\n        name: 'Do something',\n        date: '10.02.2004',\n        priority: 1\n      }, {\n        name: 'Become a billionaire',\n        date: '02.09.2024',\n        priority: 2\n      }\n    ]\n  };\n\n  toDate = string => new Date(string).toDateString()\n\n  priorities = {\n    0: 'Low',\n    1: 'Medium',\n    2: 'High'\n  }\n\n  render() {\n    return (\n      <div id=\"table\">\n        <Grid container direction=\"row\" spacing={5}>\n          <MaterialTable\n            title=\"Table\"\n            columns={this.state.columns}\n            data={this.state.data}\n            sorting\n            editable={{\n            onRowAdd: newData => new Promise(resolve => {\n              setTimeout(() => {\n                resolve();\n                const data = [...this.state.data];\n                data.push(newData);\n                this.setState({\n                  ...this.state,\n                  data\n                });\n              }, 600);\n            }),\n            onRowUpdate: (newData, oldData) => new Promise(resolve => {\n              setTimeout(() => {\n                resolve();\n                const data = [...this.state.data];\n                data[data.indexOf(oldData)] = newData;\n                this.setState({\n                  ...this.state,\n                  data\n                });\n              }, 600);\n            }),\n            onRowDelete: oldData => new Promise(resolve => {\n              setTimeout(() => {\n                resolve();\n                const data = [...this.state.data];\n                data.splice(data.indexOf(oldData), 1);\n                this.setState({\n                  ...this.state,\n                  data\n                });\n              }, 600);\n            })\n          }}/>\n          <div id=\"chart\">\n            <Chart\n              chartType=\"AreaChart\"\n              loader={(\n              <div>Loading Chart</div>\n            )}\n              data={[\n              ['Date', 'Priority']\n            ].concat(this.state.data.sort((a, b) => new Date(a.date) - new Date(b.date)).map((item, index) => [\n              {v: new Date(item.date), f: this.toDate(item.date)}, {\n                v: item.priority,\n                f: this.priorities[item.priority]\n              }\n            ]))}\n              options={{\n              title: 'Table chart',\n              hAxis: {\n                title: 'Year',\n                titleTextStyle: {\n                  color: '#333'\n                }\n              },\n              vAxis: {\n                minValue: 0,\n                maxValue: 2\n              },\n              chartArea: {\n                width: '50%',\n                height: '70%'\n              }\n            }}/>\n          </div>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Table;"]},"metadata":{},"sourceType":"module"}